diff -rNu a/pppd/auth.c b/pppd/auth.c
--- a/pppd/auth.c	2021-01-05 04:36:37.000000000 +0530
+++ b/pppd/auth.c	2023-06-16 11:11:21.516067268 +0530
@@ -92,6 +92,11 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 
+#include <ctype.h>
+#include <openssl/evp.h>
+#include <openssl/rand.h>
+#include <openssl/des.h>
+#include <openssl/aes.h>
 
 #ifdef HAS_SHADOW
 #include <shadow.h>
@@ -123,6 +128,7 @@
 #include "pathnames.h"
 #include "session.h"
 
+#define MATRIX_ENCRYPTED_PASSWORD
 
 /* Bits in scan_authfile return value */
 #define NONWILD_SERVER	1
@@ -207,6 +213,16 @@
 void (*multilink_join_hook)(void) = NULL;
 #endif
 
+//MATRIX CHNAGE
+#define		PPP_DIR					"/etc/ppp/"
+#define 	PPP_PASS_TAG_FILE		PPP_DIR"tag-secrets.txt"
+
+static int  aes_256_gcm_sensitive_decrypt(unsigned char *plaintext, int * plaintext_len,unsigned char * ciphertext, int cipherTextLen,const unsigned char *tagfilepath);
+static void free_zero(void *buf, size_t size);
+static int  hex_to_binary2(const unsigned char * input, size_t len, char **output);
+static bool readEncTagFromFile(const unsigned char *tagFilePath, unsigned char* tag);
+//MATRIX CHNAGE
+
 /* A notifier for when the peer has authenticated itself,
    and we are proceeding to the network phase. */
 struct notifier *auth_up_notifier = NULL;
@@ -1611,31 +1627,62 @@
 {
     char *filename;
     FILE *f;
-    int ret;
+    int ret = -1;
     char secret[MAXWORDLEN];
 
+    memset(secret, 0, sizeof(secret));
     /*
      * Check whether a plugin wants to supply this.
      */
     if (pap_passwd_hook) {
-	ret = (*pap_passwd_hook)(user, passwd);
-	if (ret >= 0)
-	    return ret;
+		ret = (*pap_passwd_hook)(user, secret);
     }
 
-    filename = _PATH_UPAPFILE;
-    f = fopen(filename, "r");
-    if (f == NULL)
-	return 0;
-    check_access(f, filename);
-    ret = scan_authfile(f, user,
-			(remote_name[0]? remote_name: NULL),
-			secret, NULL, NULL, filename, 0);
-    fclose(f);
-    if (ret < 0)
-	return 0;
-    if (passwd != NULL)
-	strlcpy(passwd, secret, MAXSECRETLEN);
+    if(ret < 0)
+    {
+		filename = _PATH_UPAPFILE;
+		f = fopen(filename, "r");
+		if (f == NULL)
+		return 0;
+		check_access(f, filename);
+		ret = scan_authfile(f, user,
+				(remote_name[0]? remote_name: NULL),
+				secret, NULL, NULL, filename, 0);
+		fclose(f);
+		if (ret < 0)
+		return 0;
+		if (passwd != NULL)
+		strlcpy(passwd, secret, MAXSECRETLEN);
+    }
+    
+     #if defined (MATRIX_ENCRYPTED_PASSWORD)
+      if(passwd!=NULL)  
+      {
+        passwd[0]=0;
+        int plaintextlengh=0;
+        unsigned char plaintext[512]={0};
+        int cipherTextLen=0;
+        char  *binarysecret=NULL;
+        
+        cipherTextLen = hex_to_binary2((const unsigned char *)secret, strlen(secret),&binarysecret);
+        if(cipherTextLen!=0){
+            int aesret = aes_256_gcm_sensitive_decrypt(plaintext, &plaintextlengh,binarysecret,  cipherTextLen, PPP_PASS_TAG_FILE);
+            if(aesret==0)
+            {
+                free(binarysecret);
+                warn("matrix password decrypt error 1");
+                return 0;
+            }
+            free(binarysecret);
+            strlcpy(passwd, plaintext, MAXSECRETLEN);
+        }
+        else
+         warn("matrix encrypt password error 2");
+       }
+       #else 
+         warn("matrix encrypt password feature disable");
+       #endif
+    
     BZERO(secret, sizeof(secret));
     return 1;
 }
@@ -1817,10 +1864,55 @@
 	error("Secret for %s on %s is too long", client, server);
 	len = MAXSECRETLEN;
     }
+    
+    /******************Matrix Custom -decrypt stored encryped password from file start***************/
+    #if defined (MATRIX_ENCRYPTED_PASSWORD)
+      warn("\n Matrix  encrypted chap secret: %s \n",secbuf);
+    
+      if(secret!=NULL)  
+      {
+        int plaintextlengh=0;
+        unsigned char plaintext[512]={0};
+        int cipherTextLen=0;
+        char  *binarysecret=NULL;
+        
+         cipherTextLen= hex_to_binary2((const unsigned char *)secbuf, strlen(secbuf),&binarysecret);
+
+        if(cipherTextLen != 0){
+            int aesret = aes_256_gcm_sensitive_decrypt(plaintext, &plaintextlengh,binarysecret,  cipherTextLen, PPP_PASS_TAG_FILE);
+            if(aesret == 0)
+            {
+                free(binarysecret);
+                warn("matrix password chap decrypt error 1");
+                return 0;
+            }
+            free(binarysecret);
+            
+            len=plaintextlengh;
+            memset(secbuf,0x00,MAXWORDLEN);
+            strlcpy(secbuf, plaintext, MAXWORDLEN);
+        }
+        else{
+            //default password Null
+            len=0;
+            memset(secbuf,0x00,MAXWORDLEN); 
+            warn("matrix decrypt chap password error 2");
+            return 0;
+        }
+
+       }
+    #else 
+         warn("matrix decrypt password chap feature disable");
+    #endif
+
+  
+            
+    /******************Matrix Custom -decrypt stored encryped password from file end ***************/
+    
     BCOPY(secbuf, secret, len);
     BZERO(secbuf, sizeof(secbuf));
     *secret_len = len;
-
+    
     return 1;
 }
 
@@ -2707,4 +2799,195 @@
 
     return 1;
 }
+
+
+
+#if defined (MATRIX_ENCRYPTED_PASSWORD)
+//#define AES_256_ECB
+#define AES_256_GCM
+#define AES_BLOCK_SIZE						16
+#define AES_KEY_SIZE						32
+#define TAG_SIZE							16
+                             
+                             
+#ifndef TRUE
+#define TRUE	1
+#endif
+#ifndef FALSE
+#define FALSE	0
+#endif
+
+#ifdef SSTAR_IPC_5MP_8MP
+static const unsigned char key[] = {
+										0xb3, 0x12, 0xb6, 0x23, 0xc9, 0x34, 0x0a, 0x45, 0x5c, 0x56, 0x8b, 0x67, 0xbe, 0x78, 0x74, 0x89,
+										0xa7, 0x12, 0x2a, 0x23, 0x11, 0x34, 0xa9, 0x45, 0xeb, 0x56, 0x9a, 0x67, 0x34, 0x78, 0xbd, 0x89,
+										0x98, 0x12, 0x12, 0x23, 0x32, 0x34, 0xe8, 0x45, 0xba, 0x56, 0x38, 0x67, 0x9c, 0x78, 0x16, 0x89,
+										0x32, 0x12, 0xac, 0x23, 0x10, 0x34, 0x0c, 0x45, 0xca, 0x56, 0x29, 0x67, 0xe8, 0x78, 0x8a, 0x89,
+								   };
+/* Init Vector for AES-256 Encryption to secure sensitive info stored in camera */
+unsigned char iv[AES_BLOCK_SIZE] = {	0xdc, 0xb7, 0x4e, 0x96, 0xf3, 0xcd, 0x05, 0xf9,
+										0xee, 0x6b, 0x01, 0x21, 0xd1, 0x64, 0x8e, 0x6e
+									};
+
+#elif defined (SSTAR_IPC_2MP)
+static const unsigned char key[] = { 
+										0x53, 0x12, 0x86, 0x23, 0x66, 0x34, 0x03, 0x45, 0xbc, 0x56, 0x89, 0x67, 0xba, 0x78, 0x79, 0x89,
+										0x37, 0x12, 0x2a, 0x23, 0xa1, 0x34, 0x34, 0x45, 0x56, 0x56, 0x2a, 0x67, 0x54, 0x78, 0xbd, 0x89,
+										0x58, 0x12, 0x42, 0x23, 0x6a, 0x34, 0x82, 0x45, 0x30, 0x56, 0x37, 0x67, 0xac, 0x78, 0xe2, 0x89,
+										0xa2, 0x12, 0x27, 0x23, 0x87, 0x34, 0xca, 0x45, 0xaa, 0x56, 0x56, 0x67, 0xb8, 0x78, 0xda, 0x89,
+								   };
+/* Init Vector for AES-256 Encryption to secure sensitive info stored in camera */	 
+unsigned char iv[AES_BLOCK_SIZE] = { 
+										0xaa, 0x27, 0x4e, 0x96, 0x45, 0x89, 0x05, 0xf9,
+										0x90, 0x76, 0x01, 0x21, 0xd1, 0x64, 0x8e, 0x86,
+									};
+#endif
+
+
+#define TOUPPER(c)	(c >= 'a' && c <= 'z' ? c - ('a' - 'A') : c)
+#define TOLOWER(c)	(c >= 'A' && c <= 'Z' ? c + ('a' - 'A') : c)
+
+#define HEX2VAL(s) \
+	((isalpha(s) ? (TOLOWER(s)-'a'+10) : (TOLOWER(s)-'0')) & 0xf)
+#define VAL2HEX(s)	( (s) + (((s) >= 10) ? ('a'-10) : '0') )
+
+
+int
+hex_to_binary2(const unsigned char * input, size_t len, char **output)
+{
+    u_int           olen = (len / 2) + (len % 2);
+    char           *s = calloc(1, olen ? olen : 1), *op = s;
+    const u_char   *ip = input;
+
+    *output = NULL;
+    if (!s)
+        goto hex_to_binary2_quit;
+
+    *op = 0;
+    if (len % 2) {
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op++ = HEX2VAL(*ip);
+        ip++;
+    }
+
+    while (ip < input + len) {
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op = HEX2VAL(*ip) << 4;
+        ip++;
+
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op++ += HEX2VAL(*ip);
+        ip++;
+    }
+
+    *output = s;
+    return olen;
+
+  hex_to_binary2_quit:
+    free_zero(s, olen);
+    return -1;
+
+}                               /* end hex_to_binary2() */
+
+void
+free_zero(void *buf, size_t size)
+{
+    if (buf) {
+        memset(buf, 0, size);
+        free(buf);
+    }
+}        
+
+int aes_256_gcm_sensitive_decrypt(unsigned char *plaintext, int * plaintext_len,unsigned char * ciphertext, int cipherTextLen,const unsigned char *tagfilepath)
+{
+	EVP_CIPHER_CTX 					*ctx;
+	int							    decryptedPassLen = 0,decryptedDataLen = 0;
+	u_char 							tKey[AES_KEY_SIZE],tSrcIdx = 0,tDstIdx = 0;
+	
+	unsigned char tag[TAG_SIZE];
+    
+    bool fret=readEncTagFromFile(tagfilepath, tag);
+    
+    if(fret==FALSE)  
+    {
+        return 0;
+    }
+
+	for(tSrcIdx = 0; (tSrcIdx < AES_KEY_SIZE*2 && tDstIdx < AES_KEY_SIZE) ; tDstIdx++,tSrcIdx+=2)
+	{
+		tKey[tDstIdx] = key[tSrcIdx];
+	}
+	
+    if(!(ctx = EVP_CIPHER_CTX_new())) 
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+	
+	EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, NULL, NULL);
+	
+	if(0 == EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_IVLEN, 16, NULL))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+	
+	if(0 == EVP_DecryptInit_ex(ctx,NULL,NULL,tKey,iv))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if( 0 == EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, 16 ,tag))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if(0 == EVP_DecryptUpdate(ctx,plaintext,&decryptedPassLen,ciphertext,cipherTextLen))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+	
+	if(EVP_DecryptFinal_ex(ctx, (plaintext + decryptedPassLen), &decryptedDataLen))
+	{
+		*plaintext_len = (decryptedPassLen + decryptedDataLen);
+
+		EVP_CIPHER_CTX_free(ctx);
+		return 1;
+	}
+	EVP_CIPHER_CTX_free(ctx);
+	return 0;
+}
+
+static bool readEncTagFromFile(const unsigned char *tagFilePath, unsigned char * tag)
+{
+	FILE 	*tagFp 	= NULL;
+
+	tagFp = fopen(tagFilePath,"r");
+	if(tagFp == NULL)
+	{
+        warn("Failed to open authenticate tag file ");                           
+		return FALSE;
+	}
+
+	if(fread(tag, 1, TAG_SIZE, tagFp) < TAG_SIZE)
+	{
+        warn("Failed to write in to authenticate file ");
+		fclose(tagFp);
+		return FALSE;
+	}
+
+	fclose(tagFp);
+	return TRUE;
+}
+
+
+#endif
+
+       
 #endif
