diff -rNu a/wpa_supplicant/config.c b/wpa_supplicant/config.c
--- a/wpa_supplicant/config.c	2022-01-17 02:21:29.000000000 +0530
+++ b/wpa_supplicant/config.c	2023-06-16 11:11:58.357022120 +0530
@@ -19,12 +19,51 @@
 #include "p2p/p2p.h"
 #include "fst/fst.h"
 #include "config.h"
+#include <openssl/evp.h>
+#include <openssl/aes.h>
 
 
 #if !defined(CONFIG_CTRL_IFACE) && defined(CONFIG_NO_CONFIG_WRITE)
 #define NO_CONFIG_WRITE
 #endif
 
+// MATRIX CHNAGE
+#define AES_BLOCK_SIZE						16
+#define AES_KEY_SIZE						32
+#define TAG_SIZE							16
+
+#ifdef SSTAR_IPC_5MP_8MP
+static const unsigned char key[] = {
+										0xb3, 0x12, 0xb6, 0x23, 0xc9, 0x34, 0x0a, 0x45, 0x5c, 0x56, 0x8b, 0x67, 0xbe, 0x78, 0x74, 0x89,
+										0xa7, 0x12, 0x2a, 0x23, 0x11, 0x34, 0xa9, 0x45, 0xeb, 0x56, 0x9a, 0x67, 0x34, 0x78, 0xbd, 0x89,
+										0x98, 0x12, 0x12, 0x23, 0x32, 0x34, 0xe8, 0x45, 0xba, 0x56, 0x38, 0x67, 0x9c, 0x78, 0x16, 0x89,
+										0x32, 0x12, 0xac, 0x23, 0x10, 0x34, 0x0c, 0x45, 0xca, 0x56, 0x29, 0x67, 0xe8, 0x78, 0x8a, 0x89,
+								   };
+/* Init Vector for AES-256 Encryption to secure sensitive info stored in camera */
+unsigned char iv[AES_BLOCK_SIZE] = {	0xdc, 0xb7, 0x4e, 0x96, 0xf3, 0xcd, 0x05, 0xf9,
+										0xee, 0x6b, 0x01, 0x21, 0xd1, 0x64, 0x8e, 0x6e
+									};
+
+#elif defined (SSTAR_IPC_2MP)
+static const unsigned char key[] = { 
+										0x53, 0x12, 0x86, 0x23, 0x66, 0x34, 0x03, 0x45, 0xbc, 0x56, 0x89, 0x67, 0xba, 0x78, 0x79, 0x89,
+										0x37, 0x12, 0x2a, 0x23, 0xa1, 0x34, 0x34, 0x45, 0x56, 0x56, 0x2a, 0x67, 0x54, 0x78, 0xbd, 0x89,
+										0x58, 0x12, 0x42, 0x23, 0x6a, 0x34, 0x82, 0x45, 0x30, 0x56, 0x37, 0x67, 0xac, 0x78, 0xe2, 0x89,
+										0xa2, 0x12, 0x27, 0x23, 0x87, 0x34, 0xca, 0x45, 0xaa, 0x56, 0x56, 0x67, 0xb8, 0x78, 0xda, 0x89,
+								   };
+/* Init Vector for AES-256 Encryption to secure sensitive info stored in camera */	 
+unsigned char iv[AES_BLOCK_SIZE] = { 
+										0xaa, 0x27, 0x4e, 0x96, 0x45, 0x89, 0x05, 0xf9,
+										0x90, 0x76, 0x01, 0x21, 0xd1, 0x64, 0x8e, 0x86,
+									};
+#endif
+
+char Wpa_802_pass[]	=	{"/tmp/802_1_enctag.txt"};
+
+int	aes_256_gcm_sensitive_decrypt(u_char *plaintext, int * plaintext_len,u_char * ciphertext, int cipherTextLen);
+static int readEncTagFromFile(u_char *tagFilePath, u_char* tag);
+// MATRIX CHNAGE
+
 /*
  * Structure for network configuration parsing. This data is used to implement
  * a generic parser for each network block variable. The table of configuration
@@ -1506,6 +1545,143 @@
 }
 #endif /* NO_CONFIG_WRITE */
 
+//MATRIX CHANGE
+int aes_256_gcm_sensitive_decrypt(u_char *plaintext, int * plaintext_len,u_char * ciphertext, int cipherTextLen)
+{
+	EVP_CIPHER_CTX 					*ctx;
+	int							    decryptedPassLen = 0,decryptedDataLen = 0;
+	u_char 							tKey[AES_KEY_SIZE],tSrcIdx = 0,tDstIdx = 0;
+
+	u_char tag[TAG_SIZE];
+
+	for(tSrcIdx = 0; (tSrcIdx < AES_KEY_SIZE*2 && tDstIdx < AES_KEY_SIZE); tDstIdx++,tSrcIdx+=2)
+	{
+		tKey[tDstIdx] = key[tSrcIdx];
+	}
+
+    int fret = readEncTagFromFile(Wpa_802_pass, tag);
+
+    if(fret == 0)
+    {
+    	wpa_printf(MSG_ERROR,"Failed to read tag");
+        return 0;
+    }
+
+    if(!(ctx = EVP_CIPHER_CTX_new()))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, NULL, NULL);
+
+	if(0 == EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_IVLEN, 16, NULL))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if(0 == EVP_DecryptInit_ex(ctx,NULL,NULL,tKey,iv))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if( 0 == EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_TAG, 16 ,tag))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if(0 == EVP_DecryptUpdate(ctx,plaintext,&decryptedPassLen,ciphertext,cipherTextLen))
+	{
+		EVP_CIPHER_CTX_free(ctx);
+		return 0;
+	}
+
+	if(EVP_DecryptFinal_ex(ctx, (plaintext + decryptedPassLen), &decryptedDataLen))
+	{
+		*plaintext_len = (decryptedPassLen + decryptedDataLen);
+
+		EVP_CIPHER_CTX_free(ctx);
+		return 1;
+	}
+	EVP_CIPHER_CTX_free(ctx);
+	return 0;
+}
+
+static int readEncTagFromFile(u_char *tagFilePath, u_char* tag)
+{
+	FILE 	*tagFp 	= NULL;
+
+	tagFp = fopen(tagFilePath,"r");
+	if(tagFp == NULL)
+	{
+		wpa_printf(MSG_ERROR,"Failed to open authenticate tag file ");
+		return 0;
+	}
+
+	if(fread(tag, 1, TAG_SIZE, tagFp) < TAG_SIZE)
+	{
+		fclose(tagFp);
+		return 0;
+	}
+
+	fclose(tagFp);
+	return 1;
+}
+
+#define TOLOWER(c)	(c >= 'A' && c <= 'Z' ? c + ('a' - 'A') : c)
+
+#define HEX2VAL(s) ((isalpha(s) ? (TOLOWER(s)-'a'+10) : (TOLOWER(s)-'0')) & 0xf)
+
+void free_zero(void *buf, size_t size)
+{
+    if (buf) {
+        memset(buf, 0, size);
+        free(buf);
+    }
+}
+
+int hex_to_binary2(const u_char * input, size_t len, char **output)
+{
+    u_int           olen = (len / 2) + (len % 2);
+    char           *s = calloc(1, olen ? olen : 1), *op = s;
+    const u_char   *ip = input;
+
+    *output = NULL;
+    if (!s)
+        goto hex_to_binary2_quit;
+
+    *op = 0;
+    if (len % 2) {
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op++ = HEX2VAL(*ip);
+        ip++;
+    }
+
+    while (ip < input + len) {
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op = HEX2VAL(*ip) << 4;
+        ip++;
+
+        if (!isxdigit(*ip))
+            goto hex_to_binary2_quit;
+        *op++ += HEX2VAL(*ip);
+        ip++;
+    }
+
+    *output = s;
+    return olen;
+
+  hex_to_binary2_quit:
+    free_zero(s, olen);
+    return -1;
+}
+//MATRIX CHANGE
+
 
 #ifdef IEEE8021X_EAPOL
 static int wpa_config_parse_eap(const struct parse_data *data,
@@ -1649,6 +1825,9 @@
 				     const char *value)
 {
 	u8 *hash;
+	char cmd[500];
+	int binlen = 0;
+	char *encPass = NULL;
 
 	if (os_strcmp(value, "NULL") == 0) {
 		if (!ssid->eap.password)
@@ -1688,15 +1867,32 @@
 				      (u8 *) tmp, res_len);
 
 		bin_clear_free(ssid->eap.password, ssid->eap.password_len);
-		ssid->eap.password = (u8 *) tmp;
-		ssid->eap.password_len = res_len;
+
+		binlen = hex_to_binary2(tmp, res_len, &encPass);
+		if(binlen <= 0)
+		{
+			wpa_printf(MSG_ERROR, "failed to convert binary to hex", line);
+			return -1;
+		}
+
+		char *tmpPass = (char *) malloc(res_len * sizeof(char));
+		int plaintext_len;
+
+		if( aes_256_gcm_sensitive_decrypt(tmpPass, &plaintext_len, encPass, binlen) == 0)
+		{
+			wpa_printf(MSG_ERROR,"failed to decrypt");
+			return -1;
+		}
+		free(encPass);
+		encPass = NULL;
+		ssid->eap.password = (u8 *) tmpPass;
+		ssid->eap.password_len = plaintext_len;
 		ssid->eap.flags &= ~EAP_CONFIG_FLAGS_PASSWORD_NTHASH;
 		ssid->eap.flags &= ~EAP_CONFIG_FLAGS_EXT_PASSWORD;
 
 		return 0;
 	}
 
-
 	/* NtPasswordHash: hash:<32 hex digits> */
 	if (os_strlen(value + 5) != 2 * 16) {
 		wpa_printf(MSG_ERROR,
