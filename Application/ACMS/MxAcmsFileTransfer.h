#if !defined MXACMS_FILE_TRANSFER_H
#define MXACMS_FILE_TRANSFER_H

#include <stdio.h>
#include "MxTypedef.h"

#define FTC_IDENTIFIER_LEN	(100 + 1)
#define FTC_FILE_PATH_LEN	(100 + 1)
#define FTC_SYS_CMD_LEN		(100 + 1)

typedef enum
{	
	FTC_CMD_SET_FIL = 0,
	FTC_CMD_GET_FIL,
	MAX_FTC_CMD
}FTC_CMD_e;

typedef enum
{
	FTC_IDENTIFIER_TYPE_FIRMWARE = 0,
	FTC_IDENTIFIER_TYPE_USER_PHOTO,
	FTC_IDENTIFIER_TYPE_EVENT_PHOTO,
	FTC_IDENTIFIER_TYPE_SET_USER_PALM_TMPL_WITHOUT_GUIDE,
	FTC_IDENTIFIER_TYPE_GET_USER_PALM_TMPL_WITHOUT_GUIDE,
	FTC_IDENTIFIER_TYPE_CAFE_ITEM_IMAGE,
	FTC_IDENTIFIER_TYPE_SET_USER_PALM_TMPL_WITH_GUIDE = 7,
	FTC_IDENTIFIER_TYPE_GET_USER_PALM_TMPL_WITH_GUIDE,

	FTC_IDENTIFIER_TYPE_SET_MULTILANGUAGE_FILE=10,

	FTC_IDENTIFIER_TYPE_SET_FONT_FILE=12,
	FTC_IDENTIFIER_TYPE_SET_USER_FACE_TMPL=16,
	FTC_IDENTIFIER_TYPE_GET_USER_FACE_IMAGE,
	
	FTC_IDENTIFIER_TYPE_GET_FINGERPRINT_IMAGE=21,

	FTC_IDENTIFIER_TYPE_GET_FACE_TMPLT = 25,
	FTC_IDENTIFIER_TYPE_GET_EXCEP_FACE_IMG = 27,
	MAX_FTC_IDENTIFIER_TYPE,
}FTC_IDENTIFIER_TYPE_e;

typedef enum
{
	FTC_STATE_IDLE = 0,
	FTC_STATE_PROGRESS,
	FTC_STATE_COMPLETE,
	MAX_FTC_STATE
}FTC_STATE_e;

typedef enum
{
	FTC_STATUS_FAIL = 0,
	FTC_STATUS_SUCCESS,
	FTC_STATUS_WRONG_ATTEMPT,
	FTC_STATUS_SEQ_NO_MISMATCHED,
	FTC_STATUS_IDENTIFIER_TYPE_MISMATCHED,
	FTC_STATUS_IDENTIFIER_INVALID,
	FTC_STATUS_INVALID_FILE_LENGTH,
	FTC_STATUS_INVALID_DATA_LENGTH,
	
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_OTHER_REASON	= 9,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_JPEG_CONVERSION_FAIL,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_ACS_BUSY,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_WRONG_LOCATION,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_WRONG_USER_ID,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_AES_ENCRYPTION_FAIL,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_MEMORY_FULL,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_WRITING_IMAGE,
	FTC_STATUS_SAVE_FP_IMAGE_ERROR_NOT_RECEIVED_FROM_SERVER,

	FTC_STATUS_TIMEOUT,
	FTC_STATUS_UNKNOWN_ERROR = 99,
	
	MAX_FTC_STATUS
}FTC_STATUS_e;

typedef enum
{
	FTC_ACK_SUCCESS,
	FTC_ACK_FAIL,
	FTC_ACK_DUPLICATE,
}FTC_ACK_STAT_e;

typedef struct
{	
	FTC_STATE_e				ftcState;			// File transfer state in idle or in progress 
	INT32					fd;					// File descriptor information
	CHAR					ftcFilePath[FTC_FILE_PATH_LEN];		// File transfer 
	
	FTC_CMD_e				ftcCmd;				// File transfer command
	UINT32					ftcCurrentSeqNo;	// File transfer current sequence number
	UINT32					ftcEndSeqNo;		// File transfer end sequense number
	FTC_IDENTIFIER_TYPE_e	ftcIdentifierType;	// File transfer identifier type 
	CHAR					ftcIdentifier1[FTC_IDENTIFIER_LEN];	// File transfer identifier 1 information 
	CHAR					ftcIdentifier2[FTC_IDENTIFIER_LEN]; // File transfer identifier 2 information 
	UINT32					ftcCurrentFileSize;	// File transfer current file size 
	UINT32					ftcEndFileSize;		// File transfer end of file size
	UINT32					ftcRecvDataLength;	// File transfer received data length
}FTC_INFO_t;

void InitAcmsFtc(void);
void ResetFtcActivity(void);
BOOL AcmsFtcHandlerSetFile(CHARPTR * rxData, CHARPTR txData, UINT16PTR txDataLen);
BOOL AcmsFtcHandlerGetFile(CHARPTR * rxData, CHARPTR txData, UINT16PTR txDataLen);
BOOL AcmsFtcHandlerRplFile(CHARPTR txData, UINT16PTR txDataLen);
FTC_ACK_STAT_e AcmsFtcHandlerAckFile(CHARPTR * rxData, CHARPTR txData, UINT16PTR txDataLen);
VOID AcmsFtcEndFilHandler();
#endif
